{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 1.把500input.txt以RDD的形式叫出來"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "text_file = sc.textFile(\"500input.txt\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2.以空格分開，每一行裡的元素再以逗號加以分開"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "mm = text_file.map(lambda line: line.split(\" \"))\\\n",
    ".map(lambda word: word[0].split(\",\")) \\"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 3.為M與N矩陣分別造出以欄與列為key的RDD\n",
    "+ mm_M.take(1) <br>\n",
    "[('0', ['M','0', '51'])]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "mm_M = mm.filter(lambda x: x[0] == \"M\").map(lambda x: (x.pop(2),x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "mm_N = mm.filter(lambda x: x[0] == \"N\").map(lambda x: (x.pop(1),x))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 4.將兩個RDD以key聚合\n",
    "+ mm_new.take(1) <br>\n",
    "[('4',\n",
    "  (<pyspark.resultiterable.ResultIterable at 0x1d2ce5de2b0>,\n",
    "   <pyspark.resultiterable.ResultIterable at 0x1d2ce602860>))]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "mm_new = mm_M.cogroup(mm_N)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 5.留下tuple的部分\n",
    "+ mm_new.take(1) <br>\n",
    "[(<pyspark.resultiterable.ResultIterable at 0x1d2ce7cb080>,\n",
    "  <pyspark.resultiterable.ResultIterable at 0x1d2ce8f1978>)] <br>\n",
    "前面一項會是一堆['M','0', '51']，後者則是['N',...]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "mm_new = mm_new.map(lambda x: x[1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 6.Mapping:對於每一對tuple裡面的元素相互配對\n",
    "+ mm_map.take(3) <br>\n",
    "[[(0, 0), 1840], [(0, 1), 1300], [(0, 2), 100]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "def mapper1(x):\n",
    "    list1 = []\n",
    "    for j in x[0]:\n",
    "        for k in x[1]:\n",
    "            list1.append([(eval(j[1]),eval(k[1])),eval(j[2]+\"*\"+k[2])])\n",
    "    return list1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "mm_map = mm_new.flatMap(mapper1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 7.reduceByKey:將每個有一樣key的element加起來\n",
    "+ ex. [(0,0),1840]和[(0,0),2445]會被加起來變成[(0,0),1840+2445]\n",
    "\n",
    "# 8. sortByKey:並以key做排序\n",
    "# 9. persist:存在記憶體，加速後續的計算"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "def reducer1(x,y):\n",
    "    return x+y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "mm_group = mm_map.groupByKey().cache()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "mm_sorted = mm_group.reduceByKey(reducer1,31).sortByKey().persist()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 10.造出Outputfile.txt準備寫入結果"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "f = open(\"Outputfile.txt\", \"w\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 11. 將RDD從記憶體中取出並改成EX.(0,0,2638)的形式寫入txt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in mm_sorted.unpersist().map(lambda x: (x[0][0],x[0][1],x[1])).collect():\n",
    "    f.write(str(i[0])+\",\"+str(i[1])+\",\"+str(i[2])+\"\\n\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "f.close()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
