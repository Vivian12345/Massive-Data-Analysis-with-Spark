{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "from pyspark import SparkConf, SparkContext\n",
    "\n",
    "sc._conf.setAll([('spark.executor.memory', '8g'), \n",
    "                 ('spark.executor.cores', '8g'), \n",
    "                 ('spark.cores.max', '8g'),\n",
    "                 ('spark.driver.maxResultSize', '10g'), \n",
    "                 ('spark.driver.memory','45g')])\n",
    "\n",
    "conf = SparkConf().setMaster(\"local[*]\").setAppName(\"SNA\")\n",
    "sc = SparkContext(conf=conf)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 1. data: zachary karate club dataset\n",
    "+ 34 members in the club\n",
    "+ 78 edges in total \n",
    "+ undirected\n",
    "+ unweighted"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "@inproceedings{nr,\n",
    "     title={The Network Data Repository with Interactive Graph Analytics and Visualization},\n",
    "     author={Ryan A. Rossi and Nesreen K. Ahmed},\n",
    "     booktitle={AAAI},\n",
    "     url={http://networkrepository.com},\n",
    "     year={2015}\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## (1) Summary\n",
    "+ neighbors_dict: 每一個member周圍所有有聯結的member\n",
    "  ex. neighbors_dict[\"1\"] -> ['2','3','4']\n",
    "+ members: 所有的member"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "network1 = sc.textFile(\"C:\\\\Users\\\\admin\\\\ucidata-zachary.edges.txt\",2).map(lambda x: x.split(\",\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "network2 = network1.map(lambda x:(x[1],x[0]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "network = network1.union(network2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "neighbors = network.groupByKey().map(lambda x: (x[0], list(x[1])))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('4', ['8', '13', '14', '1', '2', '3'])]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "neighbors.take(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "neighbors_dict = dict(neighbors.collect())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['2',\n",
       " '3',\n",
       " '4',\n",
       " '5',\n",
       " '6',\n",
       " '7',\n",
       " '8',\n",
       " '9',\n",
       " '11',\n",
       " '12',\n",
       " '13',\n",
       " '14',\n",
       " '18',\n",
       " '20',\n",
       " '22',\n",
       " '32']"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "neighbors_dict[\"1\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "member = neighbors.map(lambda x:x[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['4',\n",
       " '24',\n",
       " '26',\n",
       " '16',\n",
       " '10',\n",
       " '20',\n",
       " '12',\n",
       " '3',\n",
       " '6',\n",
       " '7',\n",
       " '25',\n",
       " '15',\n",
       " '23',\n",
       " '30',\n",
       " '31',\n",
       " '32',\n",
       " '18',\n",
       " '1',\n",
       " '9',\n",
       " '29',\n",
       " '19',\n",
       " '21',\n",
       " '14',\n",
       " '33',\n",
       " '8',\n",
       " '17',\n",
       " '22',\n",
       " '34',\n",
       " '2',\n",
       " '5',\n",
       " '27',\n",
       " '28',\n",
       " '11',\n",
       " '13']"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "member.cache().collect()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# all members\n",
    "members = member.collect()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2. Implement Girvan Newman Algorithm "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## (1) Implement Depth-First-Search"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "def find_path(x):\n",
    "    \n",
    "    # x裡面的members有沒有\"全\"在目前為止path上的所有members中\n",
    "    def all_in_all_element(x):\n",
    "        boolean = True\n",
    "        for c in x:\n",
    "            if c in all_element:\n",
    "                continue\n",
    "            else:\n",
    "                boolean = False\n",
    "                break\n",
    "        return boolean\n",
    "    \n",
    "    #第一層:root本身\n",
    "    all_element = []\n",
    "    all_element.append(x)\n",
    "    path = []\n",
    "    path.append([x])\n",
    "    \n",
    "    \n",
    "    # 第二層\n",
    "    level_2 = []\n",
    "    for c in neighbors_dict[x]:\n",
    "        if c not in all_element:\n",
    "            level_2.append(c)\n",
    "            all_element.append(c)\n",
    "    path.append(level_2)\n",
    "    \n",
    "    #持續好幾層，直到找不到為止\n",
    "    while path[-1] != []:\n",
    "        level = []\n",
    "        for c in level_2:\n",
    "            if  all_in_all_element(neighbors_dict[c]) == False:\n",
    "                for k in neighbors_dict[c]:\n",
    "                    if k not in all_element:\n",
    "                        level.append(k)\n",
    "                        all_element.append(k)\n",
    "        path.append(level)\n",
    "        level_2 = level\n",
    "\n",
    "    return path"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## (2) 找出每個edge的betweenness score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "def find_betweenness(x): # ex. find_betweenness(\"56\")\n",
    "    \n",
    "    # 在find_path(\"56\")中，逐層計算steps\n",
    "    steps = {}\n",
    "    for c in find_path(x)[0]:\n",
    "        steps.update({c:1})\n",
    "    for c in find_path(x)[1]:\n",
    "        steps.update({c:1})\n",
    "    for i in range(2,len(find_path(x))):\n",
    "        for c in find_path(x)[i]:\n",
    "            count = 0\n",
    "            for k in find_path(x)[i-1]:\n",
    "                if k in neighbors_dict[c]:\n",
    "                    count += steps[k]\n",
    "            steps.update({c:count})\n",
    "            \n",
    "    # 為了方便後續計算，再用find_path找出path中每一個member的直系上一層(parent)\n",
    "    # family -> 所有member與它的parent的dictionary\n",
    "    family = {}\n",
    "    i = 0\n",
    "    while i+1 < len(find_path(x)):\n",
    "        for c in find_path(x)[i+1]:\n",
    "            parent = []\n",
    "            for k in find_path(x)[i]:\n",
    "                if k in neighbors_dict[c]:\n",
    "                    parent.append(k)\n",
    "            family.update({c:parent})\n",
    "        i += 1\n",
    "    \n",
    "    \n",
    "    # 計算在path上的所有edge的betweenness score\n",
    "    edge = {}\n",
    "    betweenness_score = {}\n",
    "    for c in find_path(x):\n",
    "        for k in c:\n",
    "            edge.update({k:1})\n",
    "    i = len(find_path(x))-1\n",
    "    while i > 0:\n",
    "        for c in find_path(x)[i]:\n",
    "            for k in family[c]:\n",
    "                betweenness_score.update({(k,c):edge[c]*(steps[k]/steps[c])})\n",
    "                edge.update({k:edge[k]+edge[c]*(steps[k]/steps[c])})\n",
    "        i -= 1\n",
    "    \n",
    "    # 為了方便後續計算，將edge的表示方式調整成('34/15')且前面的數字一定比後面的大\n",
    "    betweenness_score_list = []\n",
    "    for c in betweenness_score:\n",
    "        bigger = max(eval(c[0]),eval(c[1]))\n",
    "        smaller = min(eval(c[0]),eval(c[1]))\n",
    "        edge_id = str(bigger)+\"/\"+str(smaller)\n",
    "        betweenness_score_list.append((edge_id,betweenness_score[c]))\n",
    "    \n",
    "    \n",
    "    \n",
    "    return betweenness_score_list"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "運用RDD將所有重複的edge的score加總並從大排到小排序"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "betweenness_scores = member.flatMap(find_betweenness) #找出每個edge的betweenness"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('34/15', 0.5)]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "betweenness_scores.take(1)  #[('34/15', 0.5)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "betweenness_reduce = betweenness_scores.reduceByKey(lambda x,y: x+y) #重複的edge的score加起來"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('34/15', 38.977777777777774)]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "betweenness_reduce.take(1)  #[('34/15', 38.977777777777774)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "reduce_sort = betweenness_reduce.sortBy(lambda x: x[1],False) #排序"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('32/1', 142.78571428571428)]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reduce_sort.take(1)  #('32/1', 142.78571428571428)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('32/1', 142.78571428571428),\n",
       " ('7/1', 87.66666666666666),\n",
       " ('6/1', 87.66666666666666),\n",
       " ('3/1', 87.27777777777779),\n",
       " ('9/1', 83.2968253968254),\n",
       " ('33/3', 77.40317460317459),\n",
       " ('34/14', 76.0984126984127),\n",
       " ('34/20', 66.62698412698413),\n",
       " ('12/1', 66.0),\n",
       " ('34/27', 60.91428571428571),\n",
       " ('34/32', 59.907936507936505),\n",
       " ('5/1', 58.66666666666666),\n",
       " ('11/1', 58.66666666666666),\n",
       " ('13/1', 52.2),\n",
       " ('20/1', 51.54126984126984),\n",
       " ('14/1', 47.54126984126984),\n",
       " ('32/26', 47.1888888888889),\n",
       " ('33/32', 46.48888888888889),\n",
       " ('28/3', 46.21746031746032),\n",
       " ('34/9', 45.369841269841274),\n",
       " ('18/1', 45.01904761904762),\n",
       " ('22/1', 45.01904761904762),\n",
       " ('32/25', 45.0),\n",
       " ('34/15', 38.977777777777774),\n",
       " ('34/16', 38.977777777777774),\n",
       " ('34/23', 38.977777777777774),\n",
       " ('34/19', 38.977777777777774),\n",
       " ('34/21', 38.977777777777774),\n",
       " ('34/24', 36.65555555555555),\n",
       " ('31/2', 36.219047619047615),\n",
       " ('10/3', 34.56190476190476),\n",
       " ('34/28', 34.195238095238096),\n",
       " ('33/9', 34.15555555555555),\n",
       " ('34/30', 33.44444444444444),\n",
       " ('34/10', 33.228571428571435),\n",
       " ('17/6', 33.0),\n",
       " ('17/7', 33.0),\n",
       " ('34/31', 30.085714285714285),\n",
       " ('2/1', 28.33333333333333),\n",
       " ('8/3', 28.290476190476184),\n",
       " ('34/29', 27.56190476190476),\n",
       " ('33/21', 27.022222222222226),\n",
       " ('33/15', 27.022222222222226),\n",
       " ('33/16', 27.022222222222226),\n",
       " ('33/19', 27.022222222222226),\n",
       " ('33/23', 27.022222222222226),\n",
       " ('33/30', 26.174603174603178),\n",
       " ('3/2', 26.066666666666666),\n",
       " ('8/1', 25.6047619047619),\n",
       " ('29/3', 25.56190476190476),\n",
       " ('4/3', 25.166666666666668),\n",
       " ('33/24', 25.066666666666666),\n",
       " ('4/1', 23.0),\n",
       " ('26/24', 22.18888888888889),\n",
       " ('22/2', 20.980952380952377),\n",
       " ('18/2', 20.980952380952377),\n",
       " ('28/25', 20.933333333333337),\n",
       " ('33/31', 19.133333333333333),\n",
       " ('14/4', 16.742857142857144),\n",
       " ('32/29', 16.666666666666664),\n",
       " ('20/2', 16.419047619047618),\n",
       " ('14/2', 13.919047619047618),\n",
       " ('13/4', 13.8),\n",
       " ('28/24', 11.82222222222222),\n",
       " ('31/9', 10.999999999999998),\n",
       " ('9/3', 10.295238095238094),\n",
       " ('34/33', 9.22857142857143),\n",
       " ('4/2', 8.666666666666666),\n",
       " ('14/3', 8.56190476190476),\n",
       " ('8/2', 8.32857142857143),\n",
       " ('30/24', 7.466666666666666),\n",
       " ('7/5', 5.333333333333334),\n",
       " ('11/6', 5.333333333333333),\n",
       " ('30/27', 5.085714285714285),\n",
       " ('26/25', 4.733333333333333),\n",
       " ('8/4', 3.776190476190476),\n",
       " ('11/5', 3.333333333333333),\n",
       " ('7/6', 3.333333333333333)]"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reduce_sort.cache().collect()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## (3) 從betweenness score最高的edge開始斷開"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "cut_order = reduce_sort.map(lambda x: x[0].split(\"/\")) #總分不重要，只留下edge斷開的順序"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "degree = {c:len(neighbors_dict[c]) for c in neighbors_dict} #計算modularity需要知道每個member的degree"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "cut_order_list = cut_order.collect()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[['32', '1'],\n",
       " ['7', '1'],\n",
       " ['6', '1'],\n",
       " ['3', '1'],\n",
       " ['9', '1'],\n",
       " ['33', '3'],\n",
       " ['34', '14'],\n",
       " ['34', '20'],\n",
       " ['12', '1'],\n",
       " ['34', '27'],\n",
       " ['34', '32'],\n",
       " ['5', '1'],\n",
       " ['11', '1'],\n",
       " ['13', '1'],\n",
       " ['20', '1'],\n",
       " ['14', '1'],\n",
       " ['32', '26'],\n",
       " ['33', '32'],\n",
       " ['28', '3'],\n",
       " ['34', '9'],\n",
       " ['18', '1'],\n",
       " ['22', '1'],\n",
       " ['32', '25'],\n",
       " ['34', '15'],\n",
       " ['34', '16'],\n",
       " ['34', '23'],\n",
       " ['34', '19'],\n",
       " ['34', '21'],\n",
       " ['34', '24'],\n",
       " ['31', '2'],\n",
       " ['10', '3'],\n",
       " ['34', '28'],\n",
       " ['33', '9'],\n",
       " ['34', '30'],\n",
       " ['34', '10'],\n",
       " ['17', '6'],\n",
       " ['17', '7'],\n",
       " ['34', '31'],\n",
       " ['2', '1'],\n",
       " ['8', '3'],\n",
       " ['34', '29'],\n",
       " ['33', '21'],\n",
       " ['33', '15'],\n",
       " ['33', '16'],\n",
       " ['33', '19'],\n",
       " ['33', '23'],\n",
       " ['33', '30'],\n",
       " ['3', '2'],\n",
       " ['8', '1'],\n",
       " ['29', '3'],\n",
       " ['4', '3'],\n",
       " ['33', '24'],\n",
       " ['4', '1'],\n",
       " ['26', '24'],\n",
       " ['22', '2'],\n",
       " ['18', '2'],\n",
       " ['28', '25'],\n",
       " ['33', '31'],\n",
       " ['14', '4'],\n",
       " ['32', '29'],\n",
       " ['20', '2'],\n",
       " ['14', '2'],\n",
       " ['13', '4'],\n",
       " ['28', '24'],\n",
       " ['31', '9'],\n",
       " ['9', '3'],\n",
       " ['34', '33'],\n",
       " ['4', '2'],\n",
       " ['14', '3'],\n",
       " ['8', '2'],\n",
       " ['30', '24'],\n",
       " ['7', '5'],\n",
       " ['11', '6'],\n",
       " ['30', '27'],\n",
       " ['26', '25'],\n",
       " ['8', '4'],\n",
       " ['11', '5'],\n",
       " ['7', '6']]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cut_order_list #[(\"32\",\"1\"),...]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "import itertools"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## root&leaf\n",
    "+ root: 能用最少的路徑到達所有的點 -> 核心\n",
    "+ leaf: 其他不是核心的member"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "def find_root(x):\n",
    "    path_length = []\n",
    "    for c in x:\n",
    "        path_length.append(len(find_path(c)))\n",
    "    return min(path_length)        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "find_root(members) #最少路徑是5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "root = [i for i in itertools.filterfalse(lambda x: len(find_path(x)) != 5, members)] #最核心的members -> 路徑長度5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "leaf = [i for i in itertools.filterfalse(lambda x:x in root, members)] #核心member以外的人"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "neighbors_dict = dict(neighbors.collect())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[['32', '1'],\n",
       " ['7', '1'],\n",
       " ['6', '1'],\n",
       " ['3', '1'],\n",
       " ['9', '1'],\n",
       " ['33', '3'],\n",
       " ['34', '14'],\n",
       " ['34', '20'],\n",
       " ['12', '1'],\n",
       " ['34', '27'],\n",
       " ['34', '32'],\n",
       " ['5', '1'],\n",
       " ['11', '1'],\n",
       " ['13', '1'],\n",
       " ['20', '1'],\n",
       " ['14', '1'],\n",
       " ['32', '26'],\n",
       " ['33', '32'],\n",
       " ['28', '3'],\n",
       " ['34', '9'],\n",
       " ['18', '1'],\n",
       " ['22', '1'],\n",
       " ['32', '25'],\n",
       " ['34', '15'],\n",
       " ['34', '16'],\n",
       " ['34', '23'],\n",
       " ['34', '19'],\n",
       " ['34', '21'],\n",
       " ['34', '24'],\n",
       " ['31', '2'],\n",
       " ['10', '3'],\n",
       " ['34', '28'],\n",
       " ['33', '9'],\n",
       " ['34', '30'],\n",
       " ['34', '10'],\n",
       " ['17', '6'],\n",
       " ['17', '7'],\n",
       " ['34', '31'],\n",
       " ['2', '1'],\n",
       " ['8', '3'],\n",
       " ['34', '29'],\n",
       " ['33', '21'],\n",
       " ['33', '15'],\n",
       " ['33', '16'],\n",
       " ['33', '19'],\n",
       " ['33', '23'],\n",
       " ['33', '30'],\n",
       " ['3', '2'],\n",
       " ['8', '1'],\n",
       " ['29', '3'],\n",
       " ['4', '3'],\n",
       " ['33', '24'],\n",
       " ['4', '1'],\n",
       " ['26', '24'],\n",
       " ['22', '2'],\n",
       " ['18', '2'],\n",
       " ['28', '25'],\n",
       " ['33', '31'],\n",
       " ['14', '4'],\n",
       " ['32', '29'],\n",
       " ['20', '2'],\n",
       " ['14', '2'],\n",
       " ['13', '4'],\n",
       " ['28', '24'],\n",
       " ['31', '9'],\n",
       " ['9', '3'],\n",
       " ['34', '33'],\n",
       " ['4', '2'],\n",
       " ['14', '3'],\n",
       " ['8', '2'],\n",
       " ['30', '24'],\n",
       " ['7', '5'],\n",
       " ['11', '6'],\n",
       " ['30', '27'],\n",
       " ['26', '25'],\n",
       " ['8', '4'],\n",
       " ['11', '5'],\n",
       " ['7', '6']]"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cut_order_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "winner_list = [[],0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "neighbors_dict_1 = dict(neighbors.collect())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "# group definitions / combinations\n",
    "winner_list = [[],0]\n",
    "winner_for_loop = []\n",
    "neighbors_dict = dict(neighbors.collect())\n",
    "Increased = False\n",
    "\n",
    "for f in range(10):\n",
    "    neighbors_dict = dict(neighbors.collect())\n",
    "    for c in cut_order_list:\n",
    "        all_element = []\n",
    "        a1 = c[0]\n",
    "        a2 = c[1]\n",
    "\n",
    "        neighbors_dict[c[0]].remove(c[1])\n",
    "        neighbors_dict[c[1]].remove(c[0])\n",
    "\n",
    "    ##找出graph中所有的components--------------------------------------------------------------------   \n",
    "        component = []\n",
    "\n",
    "        #找第一個component\n",
    "        for c in find_path(\"23\"): #\"23\"只是隨便一個數字，不管是任何數字應該都能找到同樣的結果\n",
    "            for k in c:\n",
    "                component.append(k)\n",
    "                all_element.append(k)\n",
    "        for c in component:\n",
    "            for k in neighbors_dict[c]:\n",
    "                if k not in component:\n",
    "                    component.append(k)\n",
    "                    all_element.append(k)\n",
    "\n",
    "\n",
    "\n",
    "        components = [component]\n",
    "\n",
    "\n",
    "        #找其他component\n",
    "        while len(set(members)) != len(set(all_element)):\n",
    "            candidate = [c for c in members if c not in all_element]\n",
    "            try:\n",
    "                component = []\n",
    "                for c in find_path(candidate[0]):\n",
    "                    for k in c:\n",
    "                        component.append(k)\n",
    "                        all_element.append(k)\n",
    "                components.append(component)\n",
    "            except:\n",
    "                pass\n",
    "\n",
    "    ##已斷開的edge連回去的條件--------------------------------------------------------------------------------\n",
    "        #不希望出現只有一個1個或2個的group被從大群裡面丟出來 <-> 定義一個group至少3人\n",
    "        Add_back = False\n",
    "        if any(len(c)<=2 for c in components) == True:  #如果出現這樣的情況則把edge連回去\n",
    "            neighbors_dict[a1] = list(itertools.chain(neighbors_dict[a1],[a2]))\n",
    "            neighbors_dict[a2] = list(itertools.chain(neighbors_dict[a2],[a1]))\n",
    "            Add_back = True\n",
    "\n",
    "        if  Add_back == True:\n",
    "            pass\n",
    "        else:\n",
    "\n",
    "    ##計算modularity------------------------------------------------------------------------------------------ \n",
    "            M = 0  #graph中edge的總量\n",
    "            Q = 0  #modularity\n",
    "\n",
    "            #先算M(graph中edge的總量)\n",
    "            for i in members:\n",
    "                M += degree[i]\n",
    "            #再算Q\n",
    "            for c in components:\n",
    "                #同一個group裡面兩個兩個加值到Q\n",
    "                for k in list(itertools.combinations(c , 2)):\n",
    "                    if k[1] in neighbors_dict_1[k[0]]:\n",
    "                        Q += 1-degree[k[1]]*degree[k[0]]/(2*M)\n",
    "                    else:\n",
    "                        Q += -degree[k[1]]*degree[k[0]]/(2*M)\n",
    "\n",
    "\n",
    "    ##將現有的component重組看看，可能可以得到更好的modularity---------------------------------------------\n",
    "\n",
    "            if len(components) == 1:   #只有一個group的時候就沒有組合的可能\n",
    "                pass\n",
    "            else:\n",
    "                Q_list_c = []\n",
    "                combination_list = []\n",
    "                for c in list(itertools.combinations(components , 2)):\n",
    "                    combinations = []\n",
    "                    new_component = list(itertools.chain(c[0],c[1]))\n",
    "                    another = [c for c in itertools.filterfalse(lambda x: x in new_component, members)]\n",
    "                    combinations.append(new_component)\n",
    "                    combinations.append(another)\n",
    "                    combination_list.append(combinations)\n",
    "\n",
    "                    Q_c = 0\n",
    "\n",
    "                    for c in combinations:\n",
    "                        for k in list(itertools.combinations(c,2)):\n",
    "                            if k[1] in neighbors_dict_1[k[0]]:\n",
    "\n",
    "                                Q_c += 1-degree[k[1]]*degree[k[0]]/(2*M)\n",
    "                            else:\n",
    "                                Q_c += -degree[k[1]]*degree[k[0]]/(2*M)\n",
    "\n",
    "\n",
    "                    Q_list_c.append(Q_c)\n",
    "                #在所有組合中擁有最大Q值的組合被留下來\n",
    "                winner_combination = [combination_list[Q_list_c.index(max(Q_list_c))],max(Q_list_c)/(2*M)]\n",
    "    #                 print(winner_combination)\n",
    "    ##來比較一下吧------------------------------------------------------------------------------------------\n",
    "            if len(components) != 1:  #只有一個group的時候，沒有組合 ->會出現ERROR\n",
    "                #把這次切斷所形成的graph和最大Q組合的graph以及在上一個loop中擁有最大Q的衛冕者做比較\n",
    "                challengers = [Q/(2*M), winner_list[1], winner_combination[1]]\n",
    "                support = [\"components\",\"winner_list[0]\", \"winner_combination[0]\"]\n",
    "\n",
    "\n",
    "            if len(components) < int(f):  #由於必須切割到一定程度，組合的Q才會開始有組合效益\n",
    "                pass\n",
    "            else:\n",
    "                if Q/(2*M) > winner_list[1]:\n",
    "                    winner_list[0] = components\n",
    "                    winner_list[1] = Q/(2*M)\n",
    "                    \n",
    "\n",
    "                else:\n",
    "                    neighbors_dict[a1] = list(itertools.chain(neighbors_dict[a1],[a2]))\n",
    "                    neighbors_dict[a2] = list(itertools.chain(neighbors_dict[a2],[a1]))\n",
    "                    Add_back = True\n",
    "\n",
    "                if len(components) != 1:\n",
    "                    ##最後留下來的就是那次loop勝出的衛冕者\n",
    "                    winner_list[0] = eval(support[challengers.index(max(challengers))])\n",
    "                    winner_list[1] = max(challengers)\n",
    "##for loop 什麼時候停\n",
    "    winner_for_loop.append(winner_list[1])\n",
    "    try:\n",
    "        if Increased == True:\n",
    "            if winner_for_loop[-1] == winner_for_loop[-2]:\n",
    "                break\n",
    "        if winner_for_loop[-1] > winner_for_loop[-2]:\n",
    "            Increased = True\n",
    "        \n",
    "    except:\n",
    "        pass\n",
    "    \n",
    "                                    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[[['23',\n",
       "   '33',\n",
       "   '21',\n",
       "   '15',\n",
       "   '16',\n",
       "   '19',\n",
       "   '31',\n",
       "   '34',\n",
       "   '9',\n",
       "   '10',\n",
       "   '3',\n",
       "   '29',\n",
       "   '32',\n",
       "   '24',\n",
       "   '30',\n",
       "   '28',\n",
       "   '27',\n",
       "   '25',\n",
       "   '26'],\n",
       "  ['4',\n",
       "   '20',\n",
       "   '12',\n",
       "   '6',\n",
       "   '7',\n",
       "   '18',\n",
       "   '1',\n",
       "   '14',\n",
       "   '8',\n",
       "   '17',\n",
       "   '22',\n",
       "   '2',\n",
       "   '5',\n",
       "   '11',\n",
       "   '13']],\n",
       " 0.16019477317554234]"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list(winner_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "#demo1 - no group definition / combinations\n",
    "winner_list_1 = [[],0]\n",
    "winner_for_loop_1 = []\n",
    "neighbors_dict = dict(neighbors.collect())\n",
    "Increased = False\n",
    "\n",
    "for f in range(10):\n",
    "    neighbors_dict = dict(neighbors.collect())\n",
    "    for c in cut_order_list:\n",
    "        all_element = []\n",
    "        a1 = c[0]\n",
    "        a2 = c[1]\n",
    "\n",
    "    \n",
    "        neighbors_dict[c[0]].remove(c[1])\n",
    "        neighbors_dict[c[1]].remove(c[0])\n",
    "\n",
    "    ##找出graph中所有的components--------------------------------------------------------------------   \n",
    "        component = []\n",
    "\n",
    "        #找第一個component\n",
    "        for c in find_path(\"23\"): #\"23\"只是隨便一個數字，不管是任何數字應該都能找到同樣的結果\n",
    "            for k in c:\n",
    "                component.append(k)\n",
    "                all_element.append(k)\n",
    "        for c in component:\n",
    "            for k in neighbors_dict[c]:\n",
    "                if k not in component:\n",
    "                    component.append(k)\n",
    "                    all_element.append(k)\n",
    "\n",
    "\n",
    "\n",
    "        components = [component]\n",
    "\n",
    "\n",
    "        #找其他component\n",
    "        while len(set(members)) != len(set(all_element)):\n",
    "            candidate = [c for c in members if c not in all_element]\n",
    "            try:\n",
    "                component = []\n",
    "                for c in find_path(candidate[0]):\n",
    "                    for k in c:\n",
    "                        component.append(k)\n",
    "                        all_element.append(k)\n",
    "                components.append(component)\n",
    "            except:\n",
    "                pass\n",
    "\n",
    "    ##已斷開的edge連回去的條件--------------------------------------------------------------------------- Problem 2\n",
    "        #不希望出現只有一個1個或2個的group被從大群裡面丟出來 <-> 定義一個group至少3人\n",
    "#         Add_back = False\n",
    "#         if any(len(c)<=2 for c in components) == True:  #如果出現這樣的情況則把edge連回去\n",
    "#             neighbors_dict[a1] = list(itertools.chain(neighbors_dict[a1],[a2]))\n",
    "#             neighbors_dict[a2] = list(itertools.chain(neighbors_dict[a2],[a1]))\n",
    "#             Add_back = True\n",
    "\n",
    "#         if  Add_back == True:\n",
    "#             pass\n",
    "        if 1+1 != 2:\n",
    "            pass\n",
    "        else:\n",
    "\n",
    "    ##計算modularity------------------------------------------------------------------------------------------ \n",
    "            M = 0  #graph中edge的總量\n",
    "            Q = 0  #modularity\n",
    "\n",
    "            #先算M(graph中edge的總量)\n",
    "            for i in members:\n",
    "                M += degree[i]\n",
    "            #再算Q\n",
    "            for c in components:\n",
    "                #同一個group裡面兩個兩個加值到Q\n",
    "                for k in list(itertools.combinations(c , 2)):\n",
    "                    if k[1] in neighbors_dict_1[k[0]]:\n",
    "                        Q += 1-degree[k[1]]*degree[k[0]]/(2*M)\n",
    "                    else:\n",
    "                        Q += -degree[k[1]]*degree[k[0]]/(2*M)\n",
    "\n",
    "\n",
    "    ##將現有的component重組看看，可能可以得到更好的modularity---------------------------------------------   for the best Q\n",
    "\n",
    "            if len(components) == 1:   #只有一個group的時候就沒有組合的可能\n",
    "                pass\n",
    "            else:\n",
    "                Q_list_c = []\n",
    "                combination_list = []\n",
    "                for c in list(itertools.combinations(components , 2)):\n",
    "                    combinations = []\n",
    "                    new_component = list(itertools.chain(c[0],c[1]))\n",
    "                    another = [c for c in itertools.filterfalse(lambda x: x in new_component, members)]\n",
    "                    combinations.append(new_component)\n",
    "                    combinations.append(another)\n",
    "                    combination_list.append(combinations)\n",
    "\n",
    "                    Q_c = 0\n",
    "\n",
    "                    for c in combinations:\n",
    "                        for k in list(itertools.combinations(c,2)):\n",
    "                            if k[1] in neighbors_dict_1[k[0]]:\n",
    "\n",
    "                                Q_c += 1-degree[k[1]]*degree[k[0]]/(2*M)\n",
    "                            else:\n",
    "                                Q_c += -degree[k[1]]*degree[k[0]]/(2*M)\n",
    "\n",
    "\n",
    "                    Q_list_c.append(Q_c)\n",
    "                #在所有組合中擁有最大Q值的組合被留下來\n",
    "                winner_combination = [combination_list[Q_list_c.index(max(Q_list_c))],max(Q_list_c)/(2*M)]\n",
    "    #                 print(winner_combination)\n",
    "    ##來比較一下吧------------------------------------------------------------------------------------------\n",
    "            if len(components) != 1:  #只有一個group的時候，沒有組合 ->會出現ERROR\n",
    "                #把這次切斷所形成的graph和最大Q組合的graph以及在上一個loop中擁有最大Q的衛冕者做比較\n",
    "                challengers = [Q/(2*M), winner_list[1], winner_combination[1]]\n",
    "                support = [\"components\",\"winner_list[0]\", \"winner_combination[0]\"]\n",
    "\n",
    "\n",
    "            if len(components) < int(f):  #由於必須切割到一定程度，組合的Q才會開始有組合效益\n",
    "                pass\n",
    "            else:\n",
    "                if Q/(2*M) > winner_list_1[1]:\n",
    "                    winner_list_1[0] = components\n",
    "                    winner_list_1[1] = Q/(2*M)\n",
    "\n",
    "                else:\n",
    "                    neighbors_dict[a1] = list(itertools.chain(neighbors_dict[a1],[a2]))\n",
    "                    neighbors_dict[a2] = list(itertools.chain(neighbors_dict[a2],[a1]))\n",
    "\n",
    "                if len(components) != 1:\n",
    "                    ##最後留下來的就是那次loop勝出的衛冕者\n",
    "                    winner_list[0] = eval(support[challengers.index(max(challengers))])\n",
    "                    winner_list[1] = max(challengers)\n",
    "##for loop 什麼時候停\n",
    "    winner_for_loop_1.append(winner_list_1[1])\n",
    "    try:\n",
    "        if Increased == True:\n",
    "            if winner_for_loop_1[-1] == winner_for_loop_1[-2]:\n",
    "                break\n",
    "        if winner_for_loop_1[-1] > winner_for_loop_1[-2]:\n",
    "            Increased = True\n",
    "        \n",
    "    except:\n",
    "        pass\n",
    "    \n",
    "                                    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[[['23',\n",
       "   '33',\n",
       "   '21',\n",
       "   '15',\n",
       "   '16',\n",
       "   '19',\n",
       "   '24',\n",
       "   '31',\n",
       "   '34',\n",
       "   '30',\n",
       "   '28',\n",
       "   '9',\n",
       "   '27',\n",
       "   '25',\n",
       "   '3',\n",
       "   '26',\n",
       "   '29',\n",
       "   '32'],\n",
       "  ['4', '8', '1', '13', '2', '22', '18', '20', '14'],\n",
       "  ['10'],\n",
       "  ['12'],\n",
       "  ['6', '7', '11', '5', '17']],\n",
       " 0.14828854372123593]"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list(winner_list_1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "#demo2 - group definations / no combinations\n",
    "winner_list_1 = [[],0]\n",
    "winner_for_loop_1 = []\n",
    "neighbors_dict = dict(neighbors.collect())\n",
    "Increased = False\n",
    "\n",
    "for f in range(10):\n",
    "    neighbors_dict = dict(neighbors.collect())\n",
    "    for c in cut_order_list:\n",
    "        all_element = []\n",
    "        a1 = c[0]\n",
    "        a2 = c[1]\n",
    "\n",
    "    \n",
    "        neighbors_dict[c[0]].remove(c[1])\n",
    "        neighbors_dict[c[1]].remove(c[0])\n",
    "\n",
    "    ##找出graph中所有的components--------------------------------------------------------------------   \n",
    "        component = []\n",
    "\n",
    "        #找第一個component\n",
    "        for c in find_path(\"23\"): #\"23\"只是隨便一個數字，不管是任何數字應該都能找到同樣的結果\n",
    "            for k in c:\n",
    "                component.append(k)\n",
    "                all_element.append(k)\n",
    "        for c in component:\n",
    "            for k in neighbors_dict[c]:\n",
    "                if k not in component:\n",
    "                    component.append(k)\n",
    "                    all_element.append(k)\n",
    "\n",
    "\n",
    "\n",
    "        components = [component]\n",
    "\n",
    "\n",
    "        #找其他component\n",
    "        while len(set(members)) != len(set(all_element)):\n",
    "            candidate = [c for c in members if c not in all_element]\n",
    "            try:\n",
    "                component = []\n",
    "                for c in find_path(candidate[0]):\n",
    "                    for k in c:\n",
    "                        component.append(k)\n",
    "                        all_element.append(k)\n",
    "                components.append(component)\n",
    "            except:\n",
    "                pass\n",
    "\n",
    "    ##已斷開的edge連回去的條件--------------------------------------------------------------------------- Problem 2\n",
    "        #不希望出現只有一個1個或2個的group被從大群裡面丟出來 <-> 定義一個group至少3人\n",
    "        Add_back = False\n",
    "        if any(len(c)<=2 for c in components) == True:  #如果出現這樣的情況則把edge連回去\n",
    "            neighbors_dict[a1] = list(itertools.chain(neighbors_dict[a1],[a2]))\n",
    "            neighbors_dict[a2] = list(itertools.chain(neighbors_dict[a2],[a1]))\n",
    "            Add_back = True\n",
    "\n",
    "        if  Add_back == True:\n",
    "            pass\n",
    "        else:\n",
    "\n",
    "    ##計算modularity------------------------------------------------------------------------------------------ \n",
    "            M = 0  #graph中edge的總量\n",
    "            Q = 0  #modularity\n",
    "\n",
    "            #先算M(graph中edge的總量)\n",
    "            for i in members:\n",
    "                M += degree[i]\n",
    "            #再算Q\n",
    "            for c in components:\n",
    "                #同一個group裡面兩個兩個加值到Q\n",
    "                for k in list(itertools.combinations(c , 2)):\n",
    "                    if k[1] in neighbors_dict_1[k[0]]:\n",
    "                        Q += 1-degree[k[1]]*degree[k[0]]/(2*M)\n",
    "                    else:\n",
    "                        Q += -degree[k[1]]*degree[k[0]]/(2*M)\n",
    "\n",
    "\n",
    "    ##將現有的component重組看看，可能可以得到更好的modularity---------------------------------------------   for the best Q\n",
    "\n",
    "#             if len(components) == 1:   #只有一個group的時候就沒有組合的可能\n",
    "#                 pass\n",
    "#             else:\n",
    "#                 Q_list_c = []\n",
    "#                 combination_list = []\n",
    "#                 for c in list(itertools.combinations(components , 2)):\n",
    "#                     combinations = []\n",
    "#                     new_component = list(itertools.chain(c[0],c[1]))\n",
    "#                     another = [c for c in itertools.filterfalse(lambda x: x in new_component, members)]\n",
    "#                     combinations.append(new_component)\n",
    "#                     combinations.append(another)\n",
    "#                     combination_list.append(combinations)\n",
    "\n",
    "#                     Q_c = 0\n",
    "\n",
    "#                     for c in combinations:\n",
    "#                         for k in list(itertools.combinations(c,2)):\n",
    "#                             if k[1] in neighbors_dict_1[k[0]]:\n",
    "\n",
    "#                                 Q_c += 1-degree[k[1]]*degree[k[0]]/(2*M)\n",
    "#                             else:\n",
    "#                                 Q_c += -degree[k[1]]*degree[k[0]]/(2*M)\n",
    "\n",
    "\n",
    "#                     Q_list_c.append(Q_c)\n",
    "#                 #在所有組合中擁有最大Q值的組合被留下來\n",
    "#                 winner_combination = [combination_list[Q_list_c.index(max(Q_list_c))],max(Q_list_c)/(2*M)]\n",
    "#     #                 print(winner_combination)\n",
    "#     ##來比較一下吧------------------------------------------------------------------------------------------\n",
    "#             if len(components) != 1:  #只有一個group的時候，沒有組合 ->會出現ERROR\n",
    "#                 #把這次切斷所形成的graph和最大Q組合的graph以及在上一個loop中擁有最大Q的衛冕者做比較\n",
    "#                 challengers = [Q/(2*M), winner_list[1], winner_combination[1]]\n",
    "#                 support = [\"components\",\"winner_list[0]\", \"winner_combination[0]\"]\n",
    "\n",
    "\n",
    "            if len(components) < int(f):  #由於必須切割到一定程度，組合的Q才會開始有組合效益\n",
    "                pass\n",
    "            else:\n",
    "                if Q/(2*M) > winner_list_1[1]:\n",
    "                    winner_list_1[0] = components\n",
    "                    winner_list_1[1] = Q/(2*M)\n",
    "\n",
    "                else:\n",
    "                    neighbors_dict[a1] = list(itertools.chain(neighbors_dict[a1],[a2]))\n",
    "                    neighbors_dict[a2] = list(itertools.chain(neighbors_dict[a2],[a1]))\n",
    "\n",
    "#                 if len(components) != 1:\n",
    "#                     ##最後留下來的就是那次loop勝出的衛冕者\n",
    "#                     winner_list[0] = eval(support[challengers.index(max(challengers))])\n",
    "#                     winner_list[1] = max(challengers)\n",
    "##for loop 什麼時候停\n",
    "    winner_for_loop_1.append(winner_list_1[1])\n",
    "    try:\n",
    "        if Increased == True:\n",
    "            if winner_for_loop_1[-1] == winner_for_loop_1[-2]:\n",
    "                break\n",
    "        if winner_for_loop_1[-1] > winner_for_loop_1[-2]:\n",
    "            Increased = True\n",
    "        \n",
    "    except:\n",
    "        pass\n",
    "    \n",
    "                                    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[[['23',\n",
       "   '33',\n",
       "   '21',\n",
       "   '15',\n",
       "   '16',\n",
       "   '19',\n",
       "   '24',\n",
       "   '34',\n",
       "   '30',\n",
       "   '28',\n",
       "   '10',\n",
       "   '27',\n",
       "   '25',\n",
       "   '26'],\n",
       "  ['4',\n",
       "   '8',\n",
       "   '1',\n",
       "   '14',\n",
       "   '13',\n",
       "   '2',\n",
       "   '12',\n",
       "   '3',\n",
       "   '22',\n",
       "   '18',\n",
       "   '20',\n",
       "   '29',\n",
       "   '9',\n",
       "   '32',\n",
       "   '31'],\n",
       "  ['6', '7', '11', '5', '17']],\n",
       " 0.14622370151216302]"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list(winner_list_1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "#demo2 - no group definitions / no combinations\n",
    "winner_list_1 = [[],0]\n",
    "winner_for_loop_1 = []\n",
    "neighbors_dict = dict(neighbors.collect())\n",
    "Increased = False\n",
    "\n",
    "for f in range(10):\n",
    "    neighbors_dict = dict(neighbors.collect())\n",
    "    for c in cut_order_list:\n",
    "        all_element = []\n",
    "        a1 = c[0]\n",
    "        a2 = c[1]\n",
    "\n",
    "    \n",
    "        neighbors_dict[c[0]].remove(c[1])\n",
    "        neighbors_dict[c[1]].remove(c[0])\n",
    "\n",
    "    ##找出graph中所有的components--------------------------------------------------------------------   \n",
    "        component = []\n",
    "\n",
    "        #找第一個component\n",
    "        for c in find_path(\"23\"): #\"23\"只是隨便一個數字，不管是任何數字應該都能找到同樣的結果\n",
    "            for k in c:\n",
    "                component.append(k)\n",
    "                all_element.append(k)\n",
    "        for c in component:\n",
    "            for k in neighbors_dict[c]:\n",
    "                if k not in component:\n",
    "                    component.append(k)\n",
    "                    all_element.append(k)\n",
    "\n",
    "\n",
    "\n",
    "        components = [component]\n",
    "\n",
    "\n",
    "        #找其他component\n",
    "        while len(set(members)) != len(set(all_element)):\n",
    "            candidate = [c for c in members if c not in all_element]\n",
    "            try:\n",
    "                component = []\n",
    "                for c in find_path(candidate[0]):\n",
    "                    for k in c:\n",
    "                        component.append(k)\n",
    "                        all_element.append(k)\n",
    "                components.append(component)\n",
    "            except:\n",
    "                pass\n",
    "\n",
    "    ##已斷開的edge連回去的條件--------------------------------------------------------------------------- Problem 2\n",
    "        #不希望出現只有一個1個或2個的group被從大群裡面丟出來 <-> 定義一個group至少3人\n",
    "#         Add_back = False\n",
    "#         if any(len(c)<=2 for c in components) == True:  #如果出現這樣的情況則把edge連回去\n",
    "#             neighbors_dict[a1] = list(itertools.chain(neighbors_dict[a1],[a2]))\n",
    "#             neighbors_dict[a2] = list(itertools.chain(neighbors_dict[a2],[a1]))\n",
    "#             Add_back = True\n",
    "\n",
    "#         if  Add_back == True:\n",
    "#             pass\n",
    "        if 1+1 != 2:\n",
    "            pass\n",
    "        else:\n",
    "\n",
    "    ##計算modularity------------------------------------------------------------------------------------------ \n",
    "            M = 0  #graph中edge的總量\n",
    "            Q = 0  #modularity\n",
    "\n",
    "            #先算M(graph中edge的總量)\n",
    "            for i in members:\n",
    "                M += degree[i]\n",
    "            #再算Q\n",
    "            for c in components:\n",
    "                #同一個group裡面兩個兩個加值到Q\n",
    "                for k in list(itertools.combinations(c , 2)):\n",
    "                    if k[1] in neighbors_dict_1[k[0]]:\n",
    "                        Q += 1-degree[k[1]]*degree[k[0]]/(2*M)\n",
    "                    else:\n",
    "                        Q += -degree[k[1]]*degree[k[0]]/(2*M)\n",
    "\n",
    "\n",
    "    ##將現有的component重組看看，可能可以得到更好的modularity---------------------------------------------   for the best Q\n",
    "\n",
    "#             if len(components) == 1:   #只有一個group的時候就沒有組合的可能\n",
    "#                 pass\n",
    "#             else:\n",
    "#                 Q_list_c = []\n",
    "#                 combination_list = []\n",
    "#                 for c in list(itertools.combinations(components , 2)):\n",
    "#                     combinations = []\n",
    "#                     new_component = list(itertools.chain(c[0],c[1]))\n",
    "#                     another = [c for c in itertools.filterfalse(lambda x: x in new_component, members)]\n",
    "#                     combinations.append(new_component)\n",
    "#                     combinations.append(another)\n",
    "#                     combination_list.append(combinations)\n",
    "\n",
    "#                     Q_c = 0\n",
    "\n",
    "#                     for c in combinations:\n",
    "#                         for k in list(itertools.combinations(c,2)):\n",
    "#                             if k[1] in neighbors_dict_1[k[0]]:\n",
    "\n",
    "#                                 Q_c += 1-degree[k[1]]*degree[k[0]]/(2*M)\n",
    "#                             else:\n",
    "#                                 Q_c += -degree[k[1]]*degree[k[0]]/(2*M)\n",
    "\n",
    "\n",
    "#                     Q_list_c.append(Q_c)\n",
    "#                 #在所有組合中擁有最大Q值的組合被留下來\n",
    "#                 winner_combination = [combination_list[Q_list_c.index(max(Q_list_c))],max(Q_list_c)/(2*M)]\n",
    "#     #                 print(winner_combination)\n",
    "#     ##來比較一下吧------------------------------------------------------------------------------------------\n",
    "#             if len(components) != 1:  #只有一個group的時候，沒有組合 ->會出現ERROR\n",
    "#                 #把這次切斷所形成的graph和最大Q組合的graph以及在上一個loop中擁有最大Q的衛冕者做比較\n",
    "#                 challengers = [Q/(2*M), winner_list[1], winner_combination[1]]\n",
    "#                 support = [\"components\",\"winner_list[0]\", \"winner_combination[0]\"]\n",
    "\n",
    "\n",
    "            if len(components) < int(f):  #由於必須切割到一定程度，組合的Q才會開始有組合效益\n",
    "                pass\n",
    "            else:\n",
    "                if Q/(2*M) > winner_list_1[1]:\n",
    "                    winner_list_1[0] = components\n",
    "                    winner_list_1[1] = Q/(2*M)\n",
    "\n",
    "                else:\n",
    "                    neighbors_dict[a1] = list(itertools.chain(neighbors_dict[a1],[a2]))\n",
    "                    neighbors_dict[a2] = list(itertools.chain(neighbors_dict[a2],[a1]))\n",
    "\n",
    "#                 if len(components) != 1:\n",
    "#                     ##最後留下來的就是那次loop勝出的衛冕者\n",
    "#                     winner_list[0] = eval(support[challengers.index(max(challengers))])\n",
    "#                     winner_list[1] = max(challengers)\n",
    "##for loop 什麼時候停\n",
    "    winner_for_loop_1.append(winner_list_1[1])\n",
    "    try:\n",
    "        if Increased == True:\n",
    "            if winner_for_loop_1[-1] == winner_for_loop_1[-2]:\n",
    "                break\n",
    "        if winner_for_loop_1[-1] > winner_for_loop_1[-2]:\n",
    "            Increased = True\n",
    "        \n",
    "    except:\n",
    "        pass\n",
    "    \n",
    "                                    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[[['23',\n",
       "   '33',\n",
       "   '21',\n",
       "   '15',\n",
       "   '16',\n",
       "   '19',\n",
       "   '24',\n",
       "   '31',\n",
       "   '34',\n",
       "   '30',\n",
       "   '28',\n",
       "   '9',\n",
       "   '27',\n",
       "   '25',\n",
       "   '3',\n",
       "   '26',\n",
       "   '29',\n",
       "   '32'],\n",
       "  ['4', '8', '1', '13', '2', '22', '18', '20', '14'],\n",
       "  ['10'],\n",
       "  ['12'],\n",
       "  ['6', '7', '11', '5', '17']],\n",
       " 0.14828854372123593]"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list(winner_list_1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[['23', '33', '15', '16', '19', '21', '31', '34', '9', '10', '3', '29', '32', '24', '30', '28', '27', '25', '26'], ['4', '20', '12', '6', '7', '18', '1', '14', '8', '17', '22', '2', '5', '11', '13']]\n",
      "0.16019477317554234\n"
     ]
    }
   ],
   "source": [
    "for c in winner_list:\n",
    "    print(c)\n",
    "    \n",
    "#最後做出的分群\n",
    "# [['4', '8', '1', '13', '2', '12', '22', '18', '20', '14', '6', '7', '11', '17', '5'], \n",
    "# ['24', '26', '16', '10', '3', '25', '15', '23', '30', '31', '32', '9', '29', '19', '21', '33', '34', '27', '28']]\n",
    "\n",
    "#最後的modularity\n",
    "# 0.16019477317554234"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "import networkx as nx\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [],
   "source": [
    "G = nx.karate_club_graph()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [],
   "source": [
    "my_pos = nx.spring_layout(G, seed = 100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [],
   "source": [
    "def tran(x):\n",
    "    new = []\n",
    "    for i in x:\n",
    "        com = []\n",
    "        for c in i:\n",
    "            com.append(eval(c)-1)\n",
    "        new.append(com)\n",
    "    return new"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[[3, 19, 11, 5, 6, 17, 0, 13, 7, 16, 21, 1, 4, 10, 12]]"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tran([['4', '20', '12', '6', '7', '18', '1', '14', '8', '17', '22', '2', '5', '11', '13']])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [],
   "source": [
    "# for node in G:\n",
    "#     if node in [11]:\n",
    "#         color_map.append('yellow')\n",
    "#     elif node in [2]:\n",
    "#         color_map.append(\"green\")\n",
    "#     else:\n",
    "#         color_map.append('red') \n",
    "color_map =[]\n",
    "for node in G:\n",
    "    if node in [3, 19, 11, 5, 6, 17, 0, 13, 7, 16, 21, 1, 4, 10, 12]:\n",
    "        color_map.append('orange')\n",
    "    else:\n",
    "        color_map.append(\"red\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "nx.draw(G, pos = my_pos, with_labels=True, node_color=color_map, node_size=300, edge_color='black', linewidths=1, font_size=10)\n",
    "plt.savefig(\"my_result.png\")\n",
    "plt.show() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "cut_list = []"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "cut_dict = {}"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
